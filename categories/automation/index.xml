<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Automation on netmemo.github.io</title>
    <link>https://netmemo.github.io/categories/automation/</link>
    <description>Recent content in Automation on netmemo.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>No&amp;euml;l Boul&amp;egrave;ne &amp;copy; 2021. This blog is strictly personnal and opinions expressed here are only mine and doesn&amp;#39;t reflect those of my past, current or futur employers. No warranty whatsoever is made that any of the posts are accurate. There is absolutely no assurance (apart from author&amp;acute;s professional integrity) that any statement contained in a post is true, correct or precise.</copyright>
    <lastBuildDate>Sun, 15 Aug 2021 14:02:39 +0200</lastBuildDate><atom:link href="https://netmemo.github.io/categories/automation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Github Actions with Terraform Cloud for CI/CD of NSX-T</title>
      <link>https://netmemo.github.io/post/tf-gha-nsxt-cicd/</link>
      <pubDate>Sun, 15 Aug 2021 14:02:39 +0200</pubDate>
      
      <guid>https://netmemo.github.io/post/tf-gha-nsxt-cicd/</guid>
      <description>This post is to show an example of using CI/CD with Terraform Cloud and Github Actions in order to have a better NetDevOps approach by doing NSX-T Network Infrastructure as code (IaC). It&amp;rsquo;s almost a bingo, I think I have most of the buzz words of these last years :)
I will describe the structure of the project, the project components, the project workflow and finish with how to test this project.</description>
    </item>
    
    <item>
      <title>Triggering Github Actions workflow with automatic Pull Request</title>
      <link>https://netmemo.github.io/post/gha-auto-pr/</link>
      <pubDate>Thu, 12 Aug 2021 17:01:57 +0200</pubDate>
      
      <guid>https://netmemo.github.io/post/gha-auto-pr/</guid>
      <description>This post is to explain one of the pain point I have encountered while trying to do Github Actions with Terraform Cloud for CI/CD of NSX-T. The difficulty is to chain workflow/pipeline automatically. In my case, I wanted to launch a workflow base of a PR create by another workflow. When you use Github Actions to interface with Github, you need to authenticate your Github Actions script against Github. You can then use the GITHUB_TOKEN that has been made for this purpose.</description>
    </item>
    
    <item>
      <title>Changing Terraform Cloud workspace in Github Actions</title>
      <link>https://netmemo.github.io/post/tf-workspace-var/</link>
      <pubDate>Thu, 12 Aug 2021 15:22:40 +0200</pubDate>
      
      <guid>https://netmemo.github.io/post/tf-workspace-var/</guid>
      <description>This blog post is to explain how I did to automatically change Terraform Cloud workspace from Github Actions. As explained in the documentation remote workspace, you can use different remote workspace by specifying the prefix of you workspace in the Terraform backend configuration.
 backend &amp;quot;remote&amp;quot; { organization = &amp;quot;netmemo&amp;quot; workspaces { prefix = &amp;quot;netmemo-&amp;quot; } } After that, you only need to select the proper workspace by entering the terraform workspace select [suffix] command.</description>
    </item>
    
    <item>
      <title>Terraform Refactoring State File</title>
      <link>https://netmemo.github.io/post/terraform-refactoring-state-file/</link>
      <pubDate>Thu, 25 Feb 2021 21:56:57 +0100</pubDate>
      
      <guid>https://netmemo.github.io/post/terraform-refactoring-state-file/</guid>
      <description>https://www.terraform.io/docs/cli/commands/state/mv.html
On windows :
It move resources from a construct like this
locals {policy1= {rule1 = {source = [&amp;quot;src1&amp;quot;,&amp;quot;src2&amp;quot;]}}policy2 = {rule1 = {source = [&amp;quot;src3&amp;quot;,&amp;quot;src4&amp;quot;]}}}To a structure like this
locals {policies = {policy1 = {rule1 = {source = [&amp;quot;src1&amp;quot;,&amp;quot;src2&amp;quot;]}}policy2 = {rule2 = {source = [&amp;quot;src3&amp;quot;,&amp;quot;src4&amp;quot;]}}}}The main moving from</description>
    </item>
    
    <item>
      <title>Python Package Offline</title>
      <link>https://netmemo.github.io/post/python-package-offline/</link>
      <pubDate>Thu, 25 Feb 2021 21:46:14 +0100</pubDate>
      
      <guid>https://netmemo.github.io/post/python-package-offline/</guid>
      <description>To install python packages offline (with no internet access), the simplest way is to dowload the packages with the dependencies on a server with internet access and the below command.
You then need to move all the files to the offline server in a directory and deploy the packages with the below command :</description>
    </item>
    
  </channel>
</rss>
