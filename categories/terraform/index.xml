<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terraform on netmemo.github.io</title>
    <link>https://netmemo.github.io/categories/terraform/</link>
    <description>Recent content in Terraform on netmemo.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>No&amp;euml;l Boul&amp;egrave;ne &amp;copy; 2021. This blog is strictly personnal and opinions expressed here are only mine and doesn&amp;#39;t reflect those of my past, current or futur employers. No warranty whatsoever is made that any of the posts are accurate. There is absolutely no assurance (apart from author&amp;acute;s professional integrity) that any statement contained in a post is true, correct or precise.</copyright>
    <lastBuildDate>Wed, 28 Jul 2021 19:03:37 +0200</lastBuildDate>
    
	<atom:link href="https://netmemo.github.io/categories/terraform/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NSX-T FWaaS with Terraform</title>
      <link>https://netmemo.github.io/post/nsxt-tf-firewall/</link>
      <pubDate>Wed, 28 Jul 2021 19:03:37 +0200</pubDate>
      
      <guid>https://netmemo.github.io/post/nsxt-tf-firewall/</guid>
      <description>This article is to show an example of how to manage NSX-T firewall rules as a code through Terraform.
You can find the project on my github account : nsxt-fwaas-tf-cm and nsxt-fwaas-tf-rm
I will describe the structure of the project, the Terraform code then finish with an example.
The diagram below shows a summary of how I organized the project in order to fully use infrastructre as code.</description>
    </item>
    
    <item>
      <title>Terraform nested for_each for NSX-T with dynamic</title>
      <link>https://netmemo.github.io/post/tf-nsxt-nested-for-each/</link>
      <pubDate>Fri, 19 Feb 2021 22:06:50 +0100</pubDate>
      
      <guid>https://netmemo.github.io/post/tf-nsxt-nested-for-each/</guid>
      <description>The post below shows how to create security policy groups for NSX-T with Terraform nested for_each loop and dynamic.
The variables are made from one map of list. Each list represents one group composed of tags.
https://www.hashicorp.com/blog/hashicorp-terraform-0-12-preview-for-and-for-each
variable &amp;quot;mapgroups&amp;quot; { type = map default = { NBO = [&amp;quot;NBO&amp;quot;] NBO-PROD = [&amp;quot;NBO&amp;quot;,&amp;quot;PROD&amp;quot;] } } resource &amp;quot;nsxt_policy_group&amp;quot; &amp;quot;nbogroups&amp;quot; { for_each = var.mapgroups display_name = each.key criteria { dynamic &amp;quot;condition&amp;quot; { for_each = each.</description>
    </item>
    
    <item>
      <title>Create portable Terraform and plugins with Terraform-bundle for Windows</title>
      <link>https://netmemo.github.io/post/tf-bundle-windows/</link>
      <pubDate>Wed, 17 Feb 2021 21:32:37 +0100</pubDate>
      
      <guid>https://netmemo.github.io/post/tf-bundle-windows/</guid>
      <description>The steps below are what I have followed to create a terraform-bundle to use terraform with non default providers on a server that doesn&amp;rsquo;t have access to Internet. You can find the tool explanation in the below link.
https://github.com/hashicorp/terraform/tree/master/tools/terraform-bundle
installation of golang with msi downloaded here
https://golang.org/doc/install
Clone the terraform repository to get the tool
https://github.com/hashicorp/terraform.git
cd terraform-master go install .\tools\terraform-bundle  Check the terraform version C:\Users\noyel\Desktop\tfforeach\nsxt&amp;gt;terraform version Terraform v0.</description>
    </item>
    
    <item>
      <title>Using Terraform for_each to create subnets in AWS VPC</title>
      <link>https://netmemo.github.io/post/tf-for-each/</link>
      <pubDate>Wed, 17 Feb 2021 20:59:49 +0100</pubDate>
      
      <guid>https://netmemo.github.io/post/tf-for-each/</guid>
      <description>An extended explanation of the differences between for_each, for and count can be find on the link below https://blog.gruntwork.io/terraform-tips-tricks-loops-if-statements-and-gotchas-f739bbae55f9
The two main drawbacks of using count are :
- Can&amp;rsquo;t be used to loop over inline blocks
- Difficult to remove entry from a list because it changes the index and those Terraform may want to destroy the resource because it has a different index
Below is an example of the variables used to create subnets within AWS VPCs and the main file with the for_each.</description>
    </item>
    
  </channel>
</rss>