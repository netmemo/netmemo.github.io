<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terraform on netmemo.github.io</title>
    <link>https://netmemo.github.io/tags/terraform/</link>
    <description>Recent content in Terraform on netmemo.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>No&amp;euml;l Boul&amp;egrave;ne &amp;copy; 2021. This blog is strictly personnal and opinions expressed here are only mine and doesn&amp;#39;t reflect those of my past, current or futur employers. No warranty whatsoever is made that any of the posts are accurate. There is absolutely no assurance (apart from author&amp;acute;s professional integrity) that any statement contained in a post is true, correct or precise.</copyright>
    <lastBuildDate>Sun, 24 Jul 2022 18:44:36 +0200</lastBuildDate>
    
	<atom:link href="https://netmemo.github.io/tags/terraform/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Terraform list of map ordering</title>
      <link>https://netmemo.github.io/post/tf-map-ordering/</link>
      <pubDate>Sun, 24 Jul 2022 18:44:36 +0200</pubDate>
      
      <guid>https://netmemo.github.io/post/tf-map-ordering/</guid>
      <description>The need I went into some troubles when I wanted to implement NSXT rules. My aim was to keep the order of the rules as intended by the user when he wrote his data without asking him to enter a rule ID manually. If the order is kept then it&amp;rsquo;s easy to prioritize the rules according to their placement. With the NSX-T Terraform provider the rules are in the form below :</description>
    </item>
    
    <item>
      <title>Terraform and the chicken and egg problem</title>
      <link>https://netmemo.github.io/post/tf-chicken-egg/</link>
      <pubDate>Sun, 19 Jun 2022 09:03:41 +0200</pubDate>
      
      <guid>https://netmemo.github.io/post/tf-chicken-egg/</guid>
      <description>The chicken and egg problem I write a lot on Terraform because I like the tool very much. This time I thought it would be good to show a situation where Terraform is not necessarily the best tool for the job. The diagram below illustrates the problem.

A needs B and B needs A. If the relationship is mandatory it will be impossible to provision these resources because we have a chicken and egg problem.</description>
    </item>
    
    <item>
      <title>ACI Terraform scalability</title>
      <link>https://netmemo.github.io/post/aci-terraform-scale/</link>
      <pubDate>Wed, 18 May 2022 22:41:35 +0200</pubDate>
      
      <guid>https://netmemo.github.io/post/aci-terraform-scale/</guid>
      <description>The context This blog is to explains the scalability issue I have faced while trying to use Terraform to deploy Cisco ACI Fabric. Terraform has been developed initially to deploy Cloud infrastructure. As everything is virtual in a Cloud environment, it&amp;rsquo;s more or less easy to organize your Terraform infrastructure per application to keep the environment small enough. As a best practice it&amp;rsquo;s recommended to keep the workspaces as small as possible to avoid performance issues.</description>
    </item>
    
    <item>
      <title>Terraform One Step Further</title>
      <link>https://netmemo.github.io/post/terraform-one-step-further/</link>
      <pubDate>Wed, 26 Jan 2022 22:00:26 +0100</pubDate>
      
      <guid>https://netmemo.github.io/post/terraform-one-step-further/</guid>
      <description>This blog is in two parts. The first part explains what is needed to start with Terraform. This second part is to go one step further but still targets beginners.
You can find more in depth articles on Gruntwork blog and the Terraform documentation is also very good.
Table of contents  Terraform Bare minimum Terraform one step further
 What happens in the background ?
 What happens if we modify the object on GUI ?</description>
    </item>
    
    <item>
      <title>Terraform Bootstrap</title>
      <link>https://netmemo.github.io/post/terraform-bootstrap/</link>
      <pubDate>Wed, 19 Jan 2022 18:40:34 +0100</pubDate>
      
      <guid>https://netmemo.github.io/post/terraform-bootstrap/</guid>
      <description>This blog is in two parts. This first part explains what is needed to start with Terraform, the second part is to go one step further but still targets beginners.
Table of content  Terraform bare minimum
 Terraform, what is it ?
 What do I need to provision something with Terraform ?
 How do I know what to create ? The configuration is made of 3 blocks</description>
    </item>
    
    <item>
      <title>Cisco ACI Terraform Policy Model</title>
      <link>https://netmemo.github.io/post/aci-terraform-policy-model/</link>
      <pubDate>Wed, 15 Dec 2021 18:40:34 +0100</pubDate>
      
      <guid>https://netmemo.github.io/post/aci-terraform-policy-model/</guid>
      <description>The big picture This blog post is a memo for the ACI Terraform policy model. I have struggled to find equivalences between ACI REST API Call / Classes and Terraform resources. Below you can find the full diagram. The diagram is not exhaustive but I think I have reached a point where I can published something. I will probably modify or add things if I use more resources or if people correct me but I think it is a good start.</description>
    </item>
    
    <item>
      <title>Can we ping an AWS Lambda function ?</title>
      <link>https://netmemo.github.io/post/lambdaping/</link>
      <pubDate>Tue, 16 Nov 2021 18:00:45 +0200</pubDate>
      
      <guid>https://netmemo.github.io/post/lambdaping/</guid>
      <description>Context Can we ping the ENI of an AWS Lambda function within the VPC ? While the answer can be obvious the path to get it was insightful for me and has helped me to be more comfortable with :
 AWS IAM.
 AWS Lambdas function.
 AWS Static IP addresses and AWS default subnets.
  This test can be performed with the AWS free tier. You will find the Terraform scripts here : Lambda Ping</description>
    </item>
    
    <item>
      <title>AWS IAM Roles with Terraform</title>
      <link>https://netmemo.github.io/post/tf-iam-roles/</link>
      <pubDate>Mon, 27 Sep 2021 18:04:31 +0200</pubDate>
      
      <guid>https://netmemo.github.io/post/tf-iam-roles/</guid>
      <description>An IAM role is an AWS identity with permission policies that determine what the identity can and cannot do in AWS.
TL;DR  The principal is WHO will be able to access a resource.
 The policy is WHAT the principals associated with the role will be able to do.
 The role links the principals thanks to the assume_role_policy with the inline policy argument. The attachement links the role to a managed policies instead of the inline policy.</description>
    </item>
    
    <item>
      <title>NSX-T Firewall rules as code with Terraform</title>
      <link>https://netmemo.github.io/post/nsxt-tf-firewall/</link>
      <pubDate>Thu, 29 Jul 2021 19:03:37 +0200</pubDate>
      
      <guid>https://netmemo.github.io/post/nsxt-tf-firewall/</guid>
      <description>This article is to show an example of how to manage NSX-T firewall rules as a code through Terraform. You can find the project on my github account : nsxt-frac-tf-cm and nsxt-frac-tf-rm
I will describe the structure of the project, how it works, the data model, the Terraform code explanation and finish with an example.
Structure of the project The diagram below shows a summary of how I organized the project in order to fully use infrastructre as code.</description>
    </item>
    
    <item>
      <title>Terraform Refactoring State File</title>
      <link>https://netmemo.github.io/post/terraform-refactoring-state-file/</link>
      <pubDate>Thu, 25 Feb 2021 21:56:57 +0100</pubDate>
      
      <guid>https://netmemo.github.io/post/terraform-refactoring-state-file/</guid>
      <description>https://www.terraform.io/docs/cli/commands/state/mv.html
On windows :
terraform state mv nsxt_policy_security_policy.policy1 nsxt_policy_security_policy.policies[\&amp;ldquo;policy1\&amp;ldquo;]  It move resources from a construct like this
locals { policy1= { rule1 = { source = [&amp;quot;src1&amp;quot;,&amp;quot;src2&amp;quot;] } } policy2 = { rule1 = { source = [&amp;quot;src3&amp;quot;,&amp;quot;src4&amp;quot;] } } }  To a structure like this
locals { policies = { policy1 = { rule1 = { source = [&amp;quot;src1&amp;quot;,&amp;quot;src2&amp;quot;] } } policy2 = { rule2 = { source = [&amp;quot;src3&amp;quot;,&amp;quot;src4&amp;quot;] } } } }  The main moving from</description>
    </item>
    
    <item>
      <title>Terraform nested for_each for NSX-T with dynamic</title>
      <link>https://netmemo.github.io/post/tf-nsxt-nested-for-each/</link>
      <pubDate>Fri, 19 Feb 2021 22:06:50 +0100</pubDate>
      
      <guid>https://netmemo.github.io/post/tf-nsxt-nested-for-each/</guid>
      <description>The post below shows how to create security policy groups for NSX-T with Terraform nested for_each loop and dynamic.
The variables are made from one map of list. Each list represents one group composed of tags.
https://www.hashicorp.com/blog/hashicorp-terraform-0-12-preview-for-and-for-each
variable &amp;quot;mapgroups&amp;quot; { type	= map default	= { NBO	= [&amp;quot;NBO&amp;quot;] NBO-PROD	= [&amp;quot;NBO&amp;quot;,&amp;quot;PROD&amp;quot;] } } resource &amp;quot;nsxt_policy_group&amp;quot; &amp;quot;nbogroups&amp;quot; { for_each	= var.mapgroups display_name	= each.key criteria { dynamic &amp;quot;condition&amp;quot; { for_each = each.</description>
    </item>
    
    <item>
      <title>Create portable Terraform and plugins with Terraform-bundle for Windows</title>
      <link>https://netmemo.github.io/post/tf-bundle-windows/</link>
      <pubDate>Wed, 17 Feb 2021 21:32:37 +0100</pubDate>
      
      <guid>https://netmemo.github.io/post/tf-bundle-windows/</guid>
      <description>The steps below are what I have followed to create a terraform-bundle to use terraform with non default providers on a server that doesn&amp;rsquo;t have access to Internet. You can find the tool explanation in the below link.
https://github.com/hashicorp/terraform/tree/master/tools/terraform-bundle
installation of golang with msi downloaded here
https://golang.org/doc/install
Clone the terraform repository to get the tool
https://github.com/hashicorp/terraform.git
cd terraform-master go install .\tools\terraform-bundle  Check the terraform version C:\Users\noyel\Desktop\tfforeach\nsxt&amp;gt;terraform version Terraform v0.</description>
    </item>
    
    <item>
      <title>Using Terraform for_each to create subnets in AWS VPC</title>
      <link>https://netmemo.github.io/post/tf-for-each/</link>
      <pubDate>Wed, 17 Feb 2021 20:59:49 +0100</pubDate>
      
      <guid>https://netmemo.github.io/post/tf-for-each/</guid>
      <description>An extended explanation of the differences between for_each, for and count can be find on the link below https://blog.gruntwork.io/terraform-tips-tricks-loops-if-statements-and-gotchas-f739bbae55f9
The two main drawbacks of using count are :
- Can&amp;rsquo;t be used to loop over inline blocks
- Difficult to remove entry from a list because it changes the index and those Terraform may want to destroy the resource because it has a different index
Below is an example of the variables used to create subnets within AWS VPCs and the main file with the for_each.</description>
    </item>
    
  </channel>
</rss>