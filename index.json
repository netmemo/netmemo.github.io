[{"authors":["Noel"],"categories":["container"],"content":" Updated2\nThis post is a memo on how I did the installtion of Kubernetes and Calico on VMs. It\u0026rsquo;s not some best pactrices in anyway.\nI\u0026rsquo;ve chose VM because I didn\u0026rsquo;t want to depend on any Cloud infrastructure. I\u0026rsquo;ve also wanted to understand the network interaction between K8s parts from an infrastructure point of view.\nPrerequisite : know how to create VMs on any hypervisors\nSteps to deploy K8s :  Install 1 ubuntu router with 3 interfaces. 1 for NAT/Internet access and 2 for the K8s LAN. I\u0026rsquo;ve created 2 LAN to see what happen under the hood when K8s nodes communicates.\n Install 3 Ubuntu servers, 1 for the master and 2 for the workers. 1 worker in the same ethernet segment and subnet than the master. 1 worker in another network.\n Gotchas:  By default, the K8s interface is the one with the default route. All my servers have one OOB interface and one production interface. Special tunning for k8s =\u0026gt; turn off the swap   Install runtime and enable it on boot\n Installing kubeadm, kubelet and kubectl\n Initializing the master (choose the pod network add-on before to add the relevent parameters, Calico parameters in my case)\n Install the pod network add-on\n Join node/workers to the cluster\n That it, you can now play with the K8s cluster\n  Optional : Install ctl for calico\nComments : To create anything you just have to kubectl apply -f myfile The magic happen in myfile where you describe what you want to create.\nDetails of the tasks 3. https://kubernetes.io/docs/setup/independent/install-kubeadm/#installing-runtime\nI\u0026rsquo;ve needed to add the following commands\nsystemctl enable docker.service systemctl start docker.service  4. https://kubernetes.io/docs/setup/independent/install-kubeadm/#installing-kubeadm-kubelet-and-kubectl\napt-get update \u0026amp;amp;\u0026amp;amp; apt-get install -y apt-transport-https curl curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - cat \u0026amp;lt;\u0026amp;lt;EOF \u0026amp;gt;/etc/apt/sources.list.d/kubernetes.list deb http://apt.kubernetes.io/ kubernetes-xenial main EOF apt-get update apt-get install -y kubelet kubeadm kubectl apt-mark hold kubelet kubeadm kubectl  5.\nkubeadm init --pod-network-cidr=192.168.0.0/16 mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config  6.\nkubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml kubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml  7.\nkubeadm join 10.0.1.10:6443 --token d34b9i.v03t2yiozio63cq6 --discovery-token-ca-cert-hash sha256:c21d04ea23790a0bf81cf64118e3a9075ffb63ed90bc697acef5793386e9eb16  Cheat Sheet\n","date":1538776759,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538776759,"objectID":"04e4be9702fa5b85a26f6612d64762cc","permalink":"https://netmemo.github.io/post/k8s-on-vms-with-calico/","publishdate":"2018-10-05T23:59:19+02:00","relpermalink":"/post/k8s-on-vms-with-calico/","section":"post","summary":"Updated2\nThis post is a memo on how I did the installtion of Kubernetes and Calico on VMs. It\u0026rsquo;s not some best pactrices in anyway.\nI\u0026rsquo;ve chose VM because I didn\u0026rsquo;t want to depend on any Cloud infrastructure. I\u0026rsquo;ve also wanted to understand the network interaction between K8s parts from an infrastructure point of view.\nPrerequisite : know how to create VMs on any hypervisors\nSteps to deploy K8s :  Install 1 ubuntu router with 3 interfaces.","tags":["calico","docker","k8s","kubernetes","netplan","ubuntu","virtualbox"],"title":"K8s on Vms With Calico","type":"post"},{"authors":["Noel"],"categories":["cisco","nexus"],"content":"On N7K\nhttps://www.cisco.com/c/en/us/support/docs/switches/nexus-7000-series-switches/116647-technote-product-00.html\n=\u0026gt; flanker car avec la commande show hardware internal dev-port-map, il n\u0026rsquo;y a pas d\u0026rsquo;asic Clipper, uniquement des flanker\nSample of icmp troubleshooting from the Admin VDC\nshow module attach module 1 show hardware internal dev-port-map elam asic flanker instance 2 layer2 trigger dbus ipv4 egress if destination-ipv4-address 10.253.108.90 start status  elam asic flanker instance 2 layer2 trigger dbus ipv4 ingress if destination-ipv4-address 10.253.108.90 start status  On N5K\nhttps://www.cisco.com/c/en/us/support/docs/switches/nexus-6000-series-switches/118902-technote-nexus-00.html\nMY-SWITCH# show platform fwm info pif ethernet 2/2 | inc slot_asic Eth2/2 pd: slot 1 logical port num 1 slot_asic_num 0 global_asic_num 5 fw_inst 4 phy_fw_inst 1 fc 0  Note: The slot numbers are 0-based, whereas the bigsur instances are 1-based. Therefore, in this example slot 1 corresponds to bigsur instance 2.\n=\u0026gt; slot 1 become 2 in the elam command, the instance stay the same as the slot_asic_num =\u0026gt; ingress for the traffic ingressing the interface, egress for the egressing traffic.\nelam slot 2 asic bigsur instance 0 trigger lu ingress ipv4 if source-ipv4-address_ipv4 10.253.108.226 destination-ipv4-address_ipv4 10.253.108.90 start capture show elam asic bigsur show capture lu stop capture  ","date":1538606937,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538606937,"objectID":"f8fba9a12db76da45dc28dbce3e682ba","permalink":"https://netmemo.github.io/post/troubleshooting-elam-cisco-n7k-n5k/","publishdate":"2018-10-04T00:48:57+02:00","relpermalink":"/post/troubleshooting-elam-cisco-n7k-n5k/","section":"post","summary":"On N7K\nhttps://www.cisco.com/c/en/us/support/docs/switches/nexus-7000-series-switches/116647-technote-product-00.html\n=\u0026gt; flanker car avec la commande show hardware internal dev-port-map, il n\u0026rsquo;y a pas d\u0026rsquo;asic Clipper, uniquement des flanker\nSample of icmp troubleshooting from the Admin VDC\nshow module attach module 1 show hardware internal dev-port-map elam asic flanker instance 2 layer2 trigger dbus ipv4 egress if destination-ipv4-address 10.253.108.90 start status  elam asic flanker instance 2 layer2 trigger dbus ipv4 ingress if destination-ipv4-address 10.253.108.90 start status  On N5K","tags":["cisco","elam","N5K","N7K","troubleshooting"],"title":"Troubleshooting Elam Cisco N7k N5k","type":"post"},{"authors":["Noel"],"categories":["container"],"content":"This is the cheat sheet for the post : https://netmemo.github.io/post/k8s-on-vms-with-calico/\nThe following post contain raw entry only for reminder purpose.\nBellow are the links I\u0026rsquo;ve used to understand/did my lab\nhttps://fr.wikipedia.org/wiki/Kubernetes#/media/File:Kubernetes.png https://kubernetes.io/docs/setup/independent/install-kubeadm/ https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/ https://kubernetes.io/docs/tutorials/k8s101/ https://kubernetes.io/docs/tutorials/k8s201/ https://kubernetes.io/docs/reference/kubectl/cheatsheet/\nJoin a node/worker to the master\nkubeadm join 10.0.1.10:6443 --token d34b9i.v03t2yiozio63cq6 --discovery-token-ca-cert-hash sha256:c21d04ea23790a0bf81cf64118e3a9075ffb63ed90bc697acef5793386e9eb16  Delete a deployment\nkubectl delete deployment nginx-deployment-nbo  To get the logs of a specific container. -n is to specify the namespace\nkubectl logs calico-node-zxvjv -n kube-system calico-node  Allow to launch a shell for a specific container\nkubectl exec -it nginx-deployment-nbo-fd57b7b88-l8xsv -- /bin/bash  Create a static page in the container to differentiate it from the others. The -c option is to ask bash to execute the command.\nkubectl exec -it nginx-deployment-nbo-fd57b7b88-kkw9s -- /bin/bash -c \u0026quot;echo Hello shell demo SRV1 \u0026gt; /usr/share/nginx/html/index.html\u0026quot; kubectl exec -it nginx-deployment-nbo-fd57b7b88-kkw9s cat /usr/share/nginx/html/index.html  To troubleshhot\njournalctl -r  Display all pods, even with the system name space, -o wide allow to see the IP addresses\nkubectl get pods --all-namespaces -o wide  To see the last messages of container associated to the pode\nkubectl describe pod -n kube-system calico-node-zxvjv  Allow to see the node/server/worker ip addresses (-o wide)\nsudo kubectl get node -o wide  by default kubernetes don\u0026rsquo;t work with swap, so I needed to disable it with the command swapoff and to comment the swap line in the fstab file.\nswapoff vi /etc/fstab # /etc/fstab: static file system information. # # Use 'blkid' to print the universally unique identifier for a # device; this may be used with UUID= as a more robust way to name devices # that works even if disks are added and removed. See fstab(5). # # /dev/mapper/ubuntu--srv--base--vg-root / ext4 errors=remount-ro 0 1 #/dev/mapper/ubuntu--srv--base--vg-swap_1 none swap sw 0 0  Not related to Kubernets but you need to modify the interfaces\nvi /etc/netplan/01-netcfg.yaml  Add interfaces to ubuntu\n/etc/netplan/01-netcfg.yaml  This file describes the network interfaces available on your system For more information, see netplan(5).\nnetwork: version: 2 renderer: networkd ethernets: enp0s3: dhcp4: no addresses: - 10.0.1.10/24 routes: - to: 0.0.0.0/0 via: 10.0.1.253 nameservers: addresses: [1.1.1.1]  apply the /etc/netplan/01-netcfg.yaml configuration\nnetplan apply  display ip addresses on interfaces\nip address show  display all interfaces\nip link show  display routes\nroute -n  In order for Kubernetes to work, you need container runtime to be started\nsystemctl enable docker.service systemctl start docker.service  Download calicoctl, to be able to interact with calico with CLI\nsudo curl -O -L https://github.com/projectcalico/calicoctl/releases/download/v3.2.1/calicoctl sudo chmod +x calicoctl  To see the state of calico on nodes (BGP,Peer-type,up/down,time)\nsudo calicoctl node status  The following commands allow to export a variables with the IP address and ports of nginx-service previously created and access the content from the host or the container\nexport SERVICE_IP=$(kubectl get service nginx-service -o go-template='{{.spec.clusterIP}}') export SERVICE_PORT=$(kubectl get service nginx-service -o go-template='{{(index .spec.ports 0).port}}') wget -qO- http://$SERVICE_IP:$SERVICE_PORT kubectl run busybox --generator=run-pod/v1 --image=busybox --restart=Never --tty -i --env \u0026quot;SERVICE_IP=$SERVICE_IP\u0026quot; --env \u0026quot;SERVICE_PORT=$SERVICE_PORT\u0026quot; u@busybox$ wget -qO- http://$SERVICE_IP:$SERVICE_PORT # Run in the busybox container u@busybox$ exit # Exit the busybox container  noel@ubuntu-srv-1:~$ cat nginx-test.yaml apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2 kind: Deployment metadata: name: nginx-deployment-nbo spec: selector: matchLabels: app: nginx replicas: 3 # tells deployment to run 3 pods matching the template template: metadata: labels: app: nginx spec: volumes: - name: shared-data emptyDir: {} containers: - name: nginx image: nginx:1.7.9 volumeMounts: - name: shared-data mountPath: /usr/share/nginx/html ports: - containerPort: 80  https://kubernetes.io/docs/tutorials/k8s201/\napiVersion: v1 kind: Service metadata: name: nginx-service spec: ports: - port: 8000 # the port that this service should serve on # the container on each pod to connect to, can be a name # (e.g. 'www') or a number (e.g. 80) targetPort: 80 protocol: TCP # just like the selector in the deployment, # but this time it identifies the set of pods to load balance # traffic to. selector: app: nginx  These commands are to configure calicoctl in order to work with the local k8s\nexport CALICO_DATASTORE_TYPE=kubernetes export CALICO_KUBECONFIG=~/.kube/config Pour le root export CALICO_KUBECONFIG=/home/noel/.kube/config  Move the Calico mode from Always to CrossSubnet. First we get the calico ippool configuration, then we need to modify the ipipMode in the yaml file and eventually to apply the new configuration\ncalicoctl get ippool -o yaml \u0026gt; ippool.yaml  Change the mode ipipMode: CrossSubnet\ncalicoctl apply -f ippool.yaml  ","date":1538606240,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538606240,"objectID":"507e52dad9b1e639033f350fdc69e5dc","permalink":"https://netmemo.github.io/post/cheat-sheet-k8s-on-vms-with-calico/","publishdate":"2018-10-04T00:37:20+02:00","relpermalink":"/post/cheat-sheet-k8s-on-vms-with-calico/","section":"post","summary":"This is the cheat sheet for the post : https://netmemo.github.io/post/k8s-on-vms-with-calico/\nThe following post contain raw entry only for reminder purpose.\nBellow are the links I\u0026rsquo;ve used to understand/did my lab\nhttps://fr.wikipedia.org/wiki/Kubernetes#/media/File:Kubernetes.png https://kubernetes.io/docs/setup/independent/install-kubeadm/ https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/ https://kubernetes.io/docs/tutorials/k8s101/ https://kubernetes.io/docs/tutorials/k8s201/ https://kubernetes.io/docs/reference/kubectl/cheatsheet/\nJoin a node/worker to the master\nkubeadm join 10.0.1.10:6443 --token d34b9i.v03t2yiozio63cq6 --discovery-token-ca-cert-hash sha256:c21d04ea23790a0bf81cf64118e3a9075ffb63ed90bc697acef5793386e9eb16  Delete a deployment\nkubectl delete deployment nginx-deployment-nbo  To get the logs of a specific container. -n is to specify the namespace","tags":["calico","docker","k8s","kubernetes","netplan","ubuntu","virtualbox"],"title":"[Cheat Sheet] K8s on VMs with Calico","type":"post"}]